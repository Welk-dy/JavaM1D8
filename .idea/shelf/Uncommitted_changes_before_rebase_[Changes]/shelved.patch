Index: src/TicketBookingSystem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\n\r\n// TicketBookingSystem.java\r\npublic class TicketBookingSystem {\r\n    private Map<String, Event> events; // Maps event names to Event objects\r\n\r\n    // Constructor\r\n    public TicketBookingSystem() {\r\n        events = new HashMap<>();\r\n    }\r\n\r\n    // Method to create an event\r\n    public void createEvent(String eventName) {\r\n        events.put(eventName.toLowerCase(), new Event(eventName)); // Store event names in lowercase\r\n    }\r\n\r\n    // Method to add a ticket to an event with a type description\r\n    public void addTicketToEvent(String eventName, double price, String ticketType) {\r\n        Event event = events.get(eventName.toLowerCase());\r\n        if (event != null) {\r\n            Ticket ticket = new Ticket(eventName, price, ticketType);  // Pass ticket type as well\r\n            event.addTicket(ticket);\r\n        } else {\r\n            System.out.println(\"Event not found.\");\r\n        }\r\n    }\r\n\r\n    // Method to display all available events and their tickets\r\n    public void displayAvailableEvents() {\r\n        if (events.isEmpty()) {\r\n            System.out.println(\"No events available.\");\r\n            return;\r\n        }\r\n\r\n        System.out.println(\"Available Events and Tickets:\");\r\n        int index = 1;\r\n        for (Event event : events.values()) {\r\n            System.out.println(index + \". Event: \" + event.getEventName());\r\n            Map<String, Double> availableTickets = event.getAvailableTickets();\r\n            for (Map.Entry<String, Double> entry : availableTickets.entrySet()) {\r\n                System.out.println(\"  Type: \" + entry.getKey() + \", Price: $\" + entry.getValue());\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n\r\n    // Method to get event name by index\r\n    public String getEventNameByIndex(int index) {\r\n        int currentIndex = 1;\r\n        for (Event event : events.values()) {\r\n            if (currentIndex == index) {\r\n                return event.getEventName();\r\n            }\r\n            currentIndex++;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Method to book a ticket\r\n    public void bookTicket(String eventName, String ticketType, User user) {\r\n        Event event = events.get(eventName.toLowerCase());\r\n        if (event != null) {\r\n            Ticket ticketToBook = event.getFirstAvailableTicketByType(ticketType);\r\n\r\n            if (ticketToBook != null) {\r\n                ticketToBook.bookTicket();\r\n                System.out.println(\"Ticket booked successfully for \" + user.getName() + \" (Email: \" + user.getEmail() + \"). Ticket details:\");\r\n                ticketToBook.printTicketDetails(); // Print ticket details including ticket ID\r\n            } else {\r\n                System.out.println(\"Ticket of type '\" + ticketType + \"' not available for event '\" + eventName + \"'.\");\r\n            }\r\n        } else {\r\n            System.out.println(\"Event not found.\");\r\n        }\r\n    }\r\n\r\n    // Method to validate user input (case-insensitive for event name)\r\n    private boolean isEventNameValid(int eventIndex) {\r\n        return getEventNameByIndex(eventIndex) != null;\r\n    }\r\n\r\n    private boolean isTicketTypeValid(String eventName, String ticketType) {\r\n        Event event = events.get(eventName.toLowerCase());\r\n        if (event != null) {\r\n            return event.isTicketTypeAvailable(ticketType);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Main method to interact with the system\r\n    public static void main(String[] args) {\r\n        TicketBookingSystem system = new TicketBookingSystem();\r\n        system.createEvent(\"Music Concert\");\r\n        system.addTicketToEvent(\"Music Concert\", 50.0, \"Standard\");\r\n        system.addTicketToEvent(\"Music Concert\", 60.0, \"VIP\");\r\n\r\n        system.createEvent(\"Art Exhibition\");\r\n        system.addTicketToEvent(\"Art Exhibition\", 30.0, \"Standard\");\r\n        system.addTicketToEvent(\"Art Exhibition\", 40.0, \"VIP\");\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        // Display all available events and tickets\r\n        system.displayAvailableEvents();\r\n\r\n        // Get user details\r\n        System.out.print(\"Enter your name: \");\r\n        String name = scanner.nextLine();\r\n        System.out.print(\"Enter your email: \");\r\n        String email = scanner.nextLine();\r\n        User user = new User(name, email);\r\n\r\n        String eventName = \"\";\r\n        String ticketType = \"\";\r\n\r\n        // Loop to prompt for a valid event name\r\n        while (true) {\r\n            System.out.print(\"Enter the number corresponding to the event you want to book a ticket for (or type 'exit' to quit): \");\r\n            String eventInput = scanner.nextLine();\r\n            if (eventInput.equalsIgnoreCase(\"exit\")) {\r\n                System.out.println(\"Exiting the booking process.\");\r\n                return;\r\n            }\r\n            try {\r\n                int eventIndex = Integer.parseInt(eventInput);\r\n                if (system.isEventNameValid(eventIndex)) {\r\n                    eventName = system.getEventNameByIndex(eventIndex);\r\n                    break;\r\n                } else {\r\n                    System.out.println(\"Invalid event selection. Please enter a valid number.\");\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                System.out.println(\"Invalid input. Please enter a number corresponding to the event.\");\r\n            }\r\n        }\r\n\r\n        // Loop to prompt for a valid ticket type\r\n        while (true) {\r\n            System.out.print(\"Enter the Ticket Type (1 for Standard, 2 for VIP, or type 'exit' to quit): \");\r\n            String ticketTypeInput = scanner.nextLine();\r\n            if (ticketTypeInput.equalsIgnoreCase(\"exit\")) {\r\n                System.out.println(\"Exiting the booking process.\");\r\n                return;\r\n            }\r\n\r\n            if (ticketTypeInput.equals(\"1\")) {\r\n                ticketType = \"Standard\";\r\n            } else if (ticketTypeInput.equals(\"2\")) {\r\n                ticketType = \"VIP\";\r\n            } else {\r\n                System.out.println(\"Invalid ticket type. Please enter '1' for Standard or '2' for VIP.\");\r\n                continue;\r\n            }\r\n\r\n            if (system.isTicketTypeValid(eventName, ticketType)) {\r\n                break;\r\n            } else {\r\n                System.out.println(\"Invalid ticket type for the selected event. Please try again.\");\r\n            }\r\n        }\r\n\r\n        // Book the selected ticket\r\n        system.bookTicket(eventName, ticketType, user);\r\n\r\n        // Display total tickets sold\r\n        System.out.println(\"Total tickets sold: \" + Ticket.getTotalTicketsSold());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TicketBookingSystem.java b/src/TicketBookingSystem.java
--- a/src/TicketBookingSystem.java	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/src/TicketBookingSystem.java	(date 1726120479722)
@@ -2,94 +2,68 @@
 import java.util.Map;
 import java.util.Scanner;
 
-// TicketBookingSystem.java
 public class TicketBookingSystem {
-    private Map<String, Event> events; // Maps event names to Event objects
+    private final Map<String, Event> events;
 
-    // Constructor
     public TicketBookingSystem() {
         events = new HashMap<>();
     }
 
-    // Method to create an event
     public void createEvent(String eventName) {
-        events.put(eventName.toLowerCase(), new Event(eventName)); // Store event names in lowercase
+        events.put(eventName.toLowerCase(), new Event(eventName));
     }
 
-    // Method to add a ticket to an event with a type description
     public void addTicketToEvent(String eventName, double price, String ticketType) {
         Event event = events.get(eventName.toLowerCase());
         if (event != null) {
-            Ticket ticket = new Ticket(eventName, price, ticketType);  // Pass ticket type as well
+            Ticket ticket = new Ticket(eventName, price, ticketType);
             event.addTicket(ticket);
         } else {
             System.out.println("Event not found.");
         }
     }
 
-    // Method to display all available events and their tickets
-    public void displayAvailableEvents() {
-        if (events.isEmpty()) {
-            System.out.println("No events available.");
-            return;
-        }
-
-        System.out.println("Available Events and Tickets:");
-        int index = 1;
-        for (Event event : events.values()) {
-            System.out.println(index + ". Event: " + event.getEventName());
-            Map<String, Double> availableTickets = event.getAvailableTickets();
-            for (Map.Entry<String, Double> entry : availableTickets.entrySet()) {
-                System.out.println("  Type: " + entry.getKey() + ", Price: $" + entry.getValue());
-            }
-            index++;
-        }
-    }
-
-    // Method to get event name by index
-    public String getEventNameByIndex(int index) {
-        int currentIndex = 1;
-        for (Event event : events.values()) {
-            if (currentIndex == index) {
-                return event.getEventName();
-            }
-            currentIndex++;
-        }
-        return null;
-    }
-
-    // Method to book a ticket
     public void bookTicket(String eventName, String ticketType, User user) {
         Event event = events.get(eventName.toLowerCase());
         if (event != null) {
             Ticket ticketToBook = event.getFirstAvailableTicketByType(ticketType);
 
             if (ticketToBook != null) {
-                ticketToBook.bookTicket();
-                System.out.println("Ticket booked successfully for " + user.getName() + " (Email: " + user.getEmail() + "). Ticket details:");
-                ticketToBook.printTicketDetails(); // Print ticket details including ticket ID
+                if (!ticketToBook.isBooked()) {
+                    ticketToBook.bookTicket();
+                    System.out.println("Ticket booked successfully for " + user.getName() + " (Email: " + user.getEmail() + ").");
+                    ticketToBook.printTicketDetails();
+                }
             } else {
-                System.out.println("Ticket of type '" + ticketType + "' not available for event '" + eventName + "'.");
-            }
-        } else {
-            System.out.println("Event not found.");
+                System.out.println("Ticket of type '" + ticketType + "' is fully booked for '" + eventName + "' event.");
+                }
         }
     }
 
-    // Method to validate user input (case-insensitive for event name)
-    private boolean isEventNameValid(int eventIndex) {
-        return getEventNameByIndex(eventIndex) != null;
+    public void validateTicket(String ticketId) {
+        for (Event event : events.values()) {
+            Ticket ticket = event.getTicketById(ticketId);
+            if (ticket != null) {
+                System.out.println("Ticket ID: " + ticketId);
+                System.out.println("Event: " + ticket.getEventName());
+                System.out.println("Price: $" + ticket.getPrice());
+                System.out.println("Type: " + ticket.getTicketType());
+                System.out.println("Status: " + (ticket.isBooked() ? "Booked" : "Available"));
+                return;
+            }
+        }
+        System.out.println("Ticket ID not found.");
     }
 
-    private boolean isTicketTypeValid(String eventName, String ticketType) {
-        Event event = events.get(eventName.toLowerCase());
-        if (event != null) {
-            return event.isTicketTypeAvailable(ticketType);
+    public void printEventDetails() {
+        for (Event event : events.values()) {
+            System.out.println("Event: " + event.getEventName());
+            for (Ticketable ticket : event.getTickets().values()) {
+                ticket.printTicketDetails(); // Polymorphic call
+            }
         }
-        return false;
     }
 
-    // Main method to interact with the system
     public static void main(String[] args) {
         TicketBookingSystem system = new TicketBookingSystem();
         system.createEvent("Music Concert");
@@ -102,69 +76,71 @@
 
         Scanner scanner = new Scanner(System.in);
 
-        // Display all available events and tickets
-        system.displayAvailableEvents();
-
-        // Get user details
-        System.out.print("Enter your name: ");
-        String name = scanner.nextLine();
-        System.out.print("Enter your email: ");
-        String email = scanner.nextLine();
-        User user = new User(name, email);
-
-        String eventName = "";
-        String ticketType = "";
-
-        // Loop to prompt for a valid event name
         while (true) {
-            System.out.print("Enter the number corresponding to the event you want to book a ticket for (or type 'exit' to quit): ");
-            String eventInput = scanner.nextLine();
-            if (eventInput.equalsIgnoreCase("exit")) {
-                System.out.println("Exiting the booking process.");
-                return;
-            }
-            try {
-                int eventIndex = Integer.parseInt(eventInput);
-                if (system.isEventNameValid(eventIndex)) {
-                    eventName = system.getEventNameByIndex(eventIndex);
+            System.out.println("1. Book Ticket");
+            System.out.println("2. Validate Ticket");
+            System.out.println("3. Exit");
+            System.out.print("Enter your choice (1, 2, or 3): ");
+            int choice = scanner.nextInt();
+            scanner.nextLine(); // Consume newline
+
+            if (choice == 1) {
+                system.printEventDetails(); // Print event details before booking
+                System.out.print("Enter the event name or 'exit' to quit: ");
+                String eventInput = scanner.nextLine();
+                if (eventInput.equalsIgnoreCase("exit")) {
+                    System.out.println("Exiting the booking process.");
                     break;
+                }
+
+                String eventName;
+                if (eventInput.equalsIgnoreCase("music concert")) {
+                    eventName = "Music Concert";
+                } else if (eventInput.equalsIgnoreCase("art exhibition")) {
+                    eventName = "Art Exhibition";
                 } else {
-                    System.out.println("Invalid event selection. Please enter a valid number.");
+                    System.out.println("Invalid event selection. Please enter Music Concert or Art Exhibition.");
+                    continue;
                 }
-            } catch (NumberFormatException e) {
-                System.out.println("Invalid input. Please enter a number corresponding to the event.");
-            }
-        }
 
-        // Loop to prompt for a valid ticket type
-        while (true) {
-            System.out.print("Enter the Ticket Type (1 for Standard, 2 for VIP, or type 'exit' to quit): ");
-            String ticketTypeInput = scanner.nextLine();
-            if (ticketTypeInput.equalsIgnoreCase("exit")) {
-                System.out.println("Exiting the booking process.");
-                return;
-            }
+                System.out.print("Enter the ticket type or 'exit' to quit: ");
+                String ticketTypeInput = scanner.nextLine();
+                if (ticketTypeInput.equalsIgnoreCase("exit")) {
+                    System.out.println("Exiting the booking process.");
+                    break;
+                }
 
-            if (ticketTypeInput.equals("1")) {
-                ticketType = "Standard";
-            } else if (ticketTypeInput.equals("2")) {
-                ticketType = "VIP";
-            } else {
-                System.out.println("Invalid ticket type. Please enter '1' for Standard or '2' for VIP.");
-                continue;
-            }
+                String ticketType;
+                if (ticketTypeInput.equalsIgnoreCase("standard")) {
+                    ticketType = "Standard";
+                } else if (ticketTypeInput.equalsIgnoreCase("vip")) {
+                    ticketType = "VIP";
+                } else {
+                    System.out.println("Invalid ticket type. Please enter Standard or VIP.");
+                    continue;
+                }
 
-            if (system.isTicketTypeValid(eventName, ticketType)) {
+                System.out.print("Enter your name: ");
+                String name = scanner.nextLine();
+                System.out.print("Enter your email: ");
+                String email = scanner.nextLine();
+                User user = new User(name, email);
+
+                system.bookTicket(eventName, ticketType, user);
+
+            } else if (choice == 2) {
+                System.out.print("Enter ticket ID to validate: ");
+                String ticketId = scanner.nextLine();
+                system.validateTicket(ticketId);
+
+            } else if (choice == 3) {
+                System.out.println("Exiting...");
                 break;
+
             } else {
-                System.out.println("Invalid ticket type for the selected event. Please try again.");
+                System.out.println("Invalid choice. Please select again.");
             }
         }
-
-        // Book the selected ticket
-        system.bookTicket(eventName, ticketType, user);
-
-        // Display total tickets sold
-        System.out.println("Total tickets sold: " + Ticket.getTotalTicketsSold());
+        scanner.close();
     }
 }
\ No newline at end of file
Index: src/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>public class User {\r\n    private String name;\r\n    private String email;\r\n\r\n    // Constructor\r\n    public User(String name, String email) {\r\n        this.name = name;\r\n        this.email = email;\r\n    }\r\n\r\n    // Getter for name\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    // Getter for email\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/User.java b/src/User.java
--- a/src/User.java	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/src/User.java	(date 1726117317820)
@@ -1,6 +1,6 @@
 public class User {
-    private String name;
-    private String email;
+    private final String name;
+    private final String email;
 
     // Constructor
     public User(String name, String email) {
Index: src/Ticketable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>interface Ticketable {\r\n    void printTicketDetails();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ticketable.java b/src/Ticketable.java
--- a/src/Ticketable.java	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/src/Ticketable.java	(date 1726117380159)
@@ -1,3 +1,3 @@
-interface Ticketable {
-    void printTicketDetails();
+public interface Ticketable {
+    void printTicketDetails(); // Method to print ticket details
 }
\ No newline at end of file
Index: src/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n// Event.java\r\npublic class Event {\r\n    private String eventName;\r\n    private List<Ticket> tickets;\r\n\r\n    // Constructor\r\n    public Event(String eventName) {\r\n        this.eventName = eventName;\r\n        this.tickets = new ArrayList<>();\r\n    }\r\n\r\n    // Getter for event name\r\n    public String getEventName() {\r\n        return eventName;\r\n    }\r\n\r\n    // Method to add a ticket to the event\r\n    public void addTicket(Ticket ticket) {\r\n        tickets.add(ticket);\r\n    }\r\n\r\n    // Method to get available tickets by type\r\n    public Map<String, Double> getAvailableTickets() {\r\n        Map<String, Double> availableTickets = new HashMap<>();\r\n        for (Ticket ticket : tickets) {\r\n            if (ticket.isAvailable()) {\r\n                availableTickets.put(ticket.getType(), ticket.getPrice());\r\n            }\r\n        }\r\n        return availableTickets;\r\n    }\r\n\r\n    // Method to check if a ticket type is available\r\n    public boolean isTicketTypeAvailable(String ticketType) {\r\n        for (Ticket ticket : tickets) {\r\n            if (ticket.getType().equalsIgnoreCase(ticketType) && ticket.isAvailable()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Method to get the first available ticket of a specific type\r\n    public Ticket getFirstAvailableTicketByType(String ticketType) {\r\n        for (Ticket ticket : tickets) {\r\n            if (ticket.getType().equalsIgnoreCase(ticketType) && ticket.isAvailable()) {\r\n                return ticket;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Event.java b/src/Event.java
--- a/src/Event.java	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/src/Event.java	(date 1726117108502)
@@ -1,57 +1,37 @@
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
-// Event.java
 public class Event {
-    private String eventName;
-    private List<Ticket> tickets;
+    private final String name;
+    private final Map<String, Ticket> tickets;
 
-    // Constructor
-    public Event(String eventName) {
-        this.eventName = eventName;
-        this.tickets = new ArrayList<>();
+    public Event(String name) {
+        this.name = name;
+        this.tickets = new LinkedHashMap<>(); // Use LinkedHashMap to maintain insertion order
     }
 
-    // Getter for event name
     public String getEventName() {
-        return eventName;
+        return name;
+    }
+
+    public Map<String, Ticket> getTickets() {
+        return tickets;
     }
 
-    // Method to add a ticket to the event
     public void addTicket(Ticket ticket) {
-        tickets.add(ticket);
-    }
-
-    // Method to get available tickets by type
-    public Map<String, Double> getAvailableTickets() {
-        Map<String, Double> availableTickets = new HashMap<>();
-        for (Ticket ticket : tickets) {
-            if (ticket.isAvailable()) {
-                availableTickets.put(ticket.getType(), ticket.getPrice());
-            }
-        }
-        return availableTickets;
-    }
-
-    // Method to check if a ticket type is available
-    public boolean isTicketTypeAvailable(String ticketType) {
-        for (Ticket ticket : tickets) {
-            if (ticket.getType().equalsIgnoreCase(ticketType) && ticket.isAvailable()) {
-                return true;
-            }
-        }
-        return false;
+        tickets.put(ticket.getTicketId(), ticket);
     }
 
-    // Method to get the first available ticket of a specific type
     public Ticket getFirstAvailableTicketByType(String ticketType) {
-        for (Ticket ticket : tickets) {
-            if (ticket.getType().equalsIgnoreCase(ticketType) && ticket.isAvailable()) {
+        for (Ticket ticket : tickets.values()) {
+            if (ticket.getTicketType().equalsIgnoreCase(ticketType) && !ticket.isBooked()) {
                 return ticket;
             }
         }
         return null;
     }
+
+    public Ticket getTicketById(String ticketId) {
+        return tickets.get(ticketId);
+    }
 }
\ No newline at end of file
Index: src/Ticket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.UUID;\r\n\r\npublic class Ticket {\r\n    private static int totalTicketsSold = 0;\r\n    private String ticketId;\r\n    private String eventName;\r\n    private double price;\r\n    private String type;\r\n    private boolean available;\r\n\r\n    // Constructor\r\n    public Ticket(String eventName, double price, String type) {\r\n        this.ticketId = UUID.randomUUID().toString();  // Generate a unique ticket ID\r\n        this.eventName = eventName;\r\n        this.price = price;\r\n        this.type = type;\r\n        this.available = true;\r\n    }\r\n\r\n    // Method to book the ticket\r\n    public void bookTicket() {\r\n        if (available) {\r\n            available = false;\r\n            totalTicketsSold++;\r\n        } else {\r\n            System.out.println(\"Ticket is not available.\");\r\n        }\r\n    }\r\n\r\n    // Method to check if the ticket is available\r\n    public boolean isAvailable() {\r\n        return available;\r\n    }\r\n\r\n    // Getter for the ticket type\r\n    public String getType() {\r\n        return type;\r\n    }\r\n\r\n    // Getter for the ticket price\r\n    public double getPrice() {\r\n        return price;\r\n    }\r\n\r\n    // Getter for the ticket ID\r\n    public String getTicketId() {\r\n        return ticketId;\r\n    }\r\n\r\n    // Print ticket details\r\n    public void printTicketDetails() {\r\n        System.out.println(\"Ticket ID: \" + ticketId + \", Event: \" + eventName + \", Type: \" + type + \", Price: $\" + price);\r\n    }\r\n\r\n    // Static method to get total tickets sold\r\n    public static int getTotalTicketsSold() {\r\n        return totalTicketsSold;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Ticket.java b/src/Ticket.java
--- a/src/Ticket.java	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/src/Ticket.java	(date 1726119498181)
@@ -1,59 +1,54 @@
 import java.util.UUID;
 
-public class Ticket {
-    private static int totalTicketsSold = 0;
-    private String ticketId;
-    private String eventName;
-    private double price;
-    private String type;
-    private boolean available;
+public class Ticket implements Ticketable {
+    private final String ticketId;
+    private final String eventName;
+    private final double price;
+    private final String ticketType;
+    private boolean isBooked;
+    private boolean printTicketId; // Flag to control ticket ID printing
 
-    // Constructor
-    public Ticket(String eventName, double price, String type) {
-        this.ticketId = UUID.randomUUID().toString();  // Generate a unique ticket ID
+    public Ticket(String eventName, double price, String ticketType) {
+        this.ticketId = UUID.randomUUID().toString();
         this.eventName = eventName;
         this.price = price;
-        this.type = type;
-        this.available = true;
+        this.ticketType = ticketType;
+        this.isBooked = false;
+        this.printTicketId = false; // Default to not print ticket ID
     }
 
-    // Method to book the ticket
-    public void bookTicket() {
-        if (available) {
-            available = false;
-            totalTicketsSold++;
-        } else {
-            System.out.println("Ticket is not available.");
-        }
-    }
-
-    // Method to check if the ticket is available
-    public boolean isAvailable() {
-        return available;
-    }
-
-    // Getter for the ticket type
-    public String getType() {
-        return type;
-    }
-
-    // Getter for the ticket price
-    public double getPrice() {
-        return price;
-    }
-
-    // Getter for the ticket ID
     public String getTicketId() {
         return ticketId;
     }
 
-    // Print ticket details
+    public String getEventName() {
+        return eventName;
+    }
+
+    public double getPrice() {
+        return price;
+    }
+
+    public String getTicketType() {
+        return ticketType;
+    }
+
+    public boolean isBooked() {
+        return isBooked;
+    }
+
+    public void bookTicket() {
+        this.isBooked = true;
+        this.printTicketId = true; // Set to true when booking
+    }
+
+    @Override
     public void printTicketDetails() {
-        System.out.println("Ticket ID: " + ticketId + ", Event: " + eventName + ", Type: " + type + ", Price: $" + price);
-    }
-
-    // Static method to get total tickets sold
-    public static int getTotalTicketsSold() {
-        return totalTicketsSold;
+        System.out.print("- " + ticketType + " Ticket");
+        System.out.print(" $" + price);
+        if (printTicketId) {
+            System.out.print(", Ticket ID: " + ticketId);
+        }
+        System.out.println(", Status: " + (isBooked ? "Booked" : "Available"));
     }
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"99f71eaf-17b6-496c-b5a1-8532d0cab1ea\" name=\"Changes\" comment=\"Feat : added the feature, but still debugging at the selecting the event type\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Event.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Event.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Ticket.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Ticket.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/TicketBookingSystem.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/TicketBookingSystem.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/User.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/User.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Welk-dy&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Welk-dy/JavaM1D8.git&quot;,\r\n    &quot;accountId&quot;: &quot;d786f768-793e-4a67-88b3-97d7014c1435&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2lv8VXuP6GssedpVqVNwlqlqLwU\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.TicketBookingSystem.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/ferna/IdeaProjects/JavaLearningDay8/src/Main.java\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"TicketBookingSystem\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"TicketBookingSystem\" />\r\n      <module name=\"JavaLearningDay8\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.TicketBookingSystem\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"99f71eaf-17b6-496c-b5a1-8532d0cab1ea\" name=\"Changes\" comment=\"\" />\r\n      <created>1726049215730</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1726049215730</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"First Commit\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726049371083</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726049371083</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Feat : added the feature, but still debugging at the selecting the event type\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1726107531475</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1726107531475</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"First Commit\" />\r\n    <MESSAGE value=\"Feat : added the feature, but still debugging at the selecting the event type\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Feat : added the feature, but still debugging at the selecting the event type\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Main.java</url>\r\n          <line>11</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a934cd7cf93a3edc85f3cbef0a9935ffd5e9759d)
+++ b/.idea/workspace.xml	(date 1726117417147)
@@ -4,11 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="99f71eaf-17b6-496c-b5a1-8532d0cab1ea" name="Changes" comment="Feat : added the feature, but still debugging at the selecting the event type">
+    <list default="true" id="99f71eaf-17b6-496c-b5a1-8532d0cab1ea" name="Changes" comment="Feat : Completed Exercises">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Event.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Event.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Ticket.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Ticket.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/TicketBookingSystem.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/TicketBookingSystem.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Ticketable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Ticketable.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/User.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/User.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -24,6 +25,11 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="Added-displayevent" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="GitHubPullRequestSearchHistory">{
@@ -54,7 +60,7 @@
   "keyToString": {
     "Application.TicketBookingSystem.executor": "Run",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "main",
+    "git-widget-placeholder": "TicketID",
     "kotlin-language-version-configured": "true",
     "onboarding.tips.debug.path": "C:/Users/ferna/IdeaProjects/JavaLearningDay8/src/Main.java"
   }
@@ -70,6 +76,9 @@
     <recent_temporary>
       <list>
         <item itemvalue="Application.TicketBookingSystem" />
+        <item itemvalue="Application.TicketBookingSystem" />
+        <item itemvalue="Application.TicketBookingSystem" />
+        <item itemvalue="Application.TicketBookingSystem" />
       </list>
     </recent_temporary>
   </component>
@@ -98,7 +107,15 @@
       <option name="project" value="LOCAL" />
       <updated>1726107531475</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="Feat : Completed Exercises">
+      <option name="closed" value="true" />
+      <created>1726110553864</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1726110553864</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -115,7 +132,8 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="First Commit" />
     <MESSAGE value="Feat : added the feature, but still debugging at the selecting the event type" />
-    <option name="LAST_COMMIT_MESSAGE" value="Feat : added the feature, but still debugging at the selecting the event type" />
+    <MESSAGE value="Feat : Completed Exercises" />
+    <option name="LAST_COMMIT_MESSAGE" value="Feat : Completed Exercises" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
